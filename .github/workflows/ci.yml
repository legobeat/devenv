name: 'oci-image'
on:
  push:
    branches: main
  pull_request:

jobs:
  docker-buildx:
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 80:5000
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: auth-proxy
            file: sidecars/git-auth-proxy/Dockerfile
            context: sidecars/git-auth-proxy
            tags: localhost/l7/auth-proxy:latest
          - name: container-socket-proxy
            context: sidecars/container-socket-proxy
            file: sidecars/container-socket-proxy/Dockerfile
            tags: localhost/l7/container-socket-proxy:latest
          - name: dnsmasq
            file: sidecars/dnsmasq/Containerfile
            context: sidecars/dnsmasq
            tags: localhost/l7/dnsmasq:latest
          - name: gpg-vault
            file: sidecars/gpg-vault-pk/Containerfile
            context: .
            tags: localhost/l7/gpg-vault:latest
          - name: node
            file: sidecars/node-runner/Containerfile
            context: .
            tags: |
              localhost/l7/node:latest
              localhost/l7/node:20-bookworm
          - name: nvim
            file: Containerfile
            context: .
            tags: localhost/l7/nvim:latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Allow cleartext http to localhost container registry (docker)
        run: |
          echo '{"insecure-registries" : [ "localhost" ]}' | sudo tee /etc/docker/daemon.json
        if: ${{ matrix.cmd == 'docker' }}
      - name: Allow cleartext http to localhost container registry (podman)
        run: |
          mkdir -p ~/.config/containers/registries.conf.d
          echo "[[registry]]
            location = 'localhost:80'
          insecure = true" | tee ~/.config/containers/registries.conf.d/insecure-localhost.conf
          systemctl --user restart podman
        if: ${{ matrix.cmd != 'docker' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build and load caddy image
        if: ${{ matrix.name == 'nvim' || matrix.name == 'node' }}
        uses: docker/build-push-action@v6
        with:
          context: sidecars/caddy
          file: sidecars/caddy/Containerfile
          tags: localhost/l7/caddy:latest
          load: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and load ${{ matrix.name }} image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          build-args: ${{ matrix.build-args }}
          tags:  ${{ matrix.tags }}
          load: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-make-all:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        cmd:
          - docker
          - podman
        os:
          - ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Allow cleartext http to localhost container registry (podman)
        run: |
          mkdir -p ~/.config/containers/registries.conf.d
          mkdir -p ~/.config/containers/storage.conf.d
          echo "[[registry]]
            location = 'localhost:80'
          insecure = true" | tee ~/.config/containers/registries.conf.d/insecure-localhost.conf
          echo "[storage]
            driver = 'overlay'
            force_mask = 'shared'
          mount_program = '/usr/bin/fuse-overlayfs'" | tee ~/.config/containers/storage.conf.d/overlay-driver.conf
          podman system migrate
          podman system reset -f
          systemctl --user restart podman
          podman info

      - run: make -j6 images_test

      - name: Export images for cache
        run: |
          mkdir -p /tmp/ci-images
          set -x
          images=$(podman images --format=json \
            | jq -r 'map(.Names)|flatten|map(select(.)|select(test("/l7[^/]*/")))|.[]' \
            | sort \
            | uniq
          )
          for img in ${images}; do
            echo "exporting ${img}"
            ${{ matrix.cmd }} save "${img}" -o "/tmp/ci-images/$(echo "${img}" | tr -d ':/').tar"
          done
        if: ${{ matrix.cmd == 'podman' }}

      - name: Save image cache
        uses: actions/cache/save@v4
        with:
          path: /tmp/ci-images
          key: 'ci-test-${{ github.sha }}'
        if: ${{ matrix.cmd == 'podman' }}

    env:
      BUILDAH_FORMAT: docker
      CMD: ${{ matrix.cmd }}
      CONTAINER_CMD: ${{ matrix.cmd }}

  test-make:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        image:
          - acng
          - auth_proxy
          - container_proxy
          - caddy
          - dnsmasq
          - gpg_pk
          - nvim
          - runner_node
        cmd:
          - docker
          - podman
        os:
          #- ubuntu-20.04
          #- ubuntu-22.04
          - ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: make -j4 CMD=${{ matrix.cmd }} image_${{ matrix.image }}
      - run: make CMD=${{ matrix.cmd }} inspect_${{ matrix.image }}
      - run: make -j4 CMD=${{ matrix.cmd }} test_${{ matrix.image }}

    env:
      CMD: ${{ matrix.cmd }}
      CONTAINER_CMD: ${{ matrix.cmd }}

  test-e2e-podman:
    runs-on: ubuntu-${{ matrix.ubuntu-version }}
    needs: test-make-all
    services:
      registry:
        image: registry:2
        ports:
          - 80:5000
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        test:
          - curl
          - ghauth
          - node_corepack
          - lsp_typescript
        ubuntu-version:
          - 24.04
    steps:
      - name: Allow cleartext http to localhost container registry (podman)
        run: |
          set -x
          sudo sed -E -i -e 's/^\s*runtime\s*=\s*"crun"/#\0/' -e 's/^#\s*(runtime\s*=\s*"runc")/\1/' /etc/containers/libpod.conf
          mkdir -p ~/.config/containers/registries.conf.d
          mkdir -p ~/.config/containers/storage.conf.d
          echo "[[registry]]
            location = 'localhost:80'
          insecure = true" | tee ~/.config/containers/registries.conf.d/insecure-localhost.conf
          echo "[storage]
            driver = 'overlay'
            force_mask = 'shared'
          mount_program = '/usr/bin/fuse-overlayfs'" | tee ~/.config/containers/storage.conf.d/overlay-driver.conf
          podman info
          podman system migrate
          podman system reset -f
          systemctl --user restart podman
          podman info
      - name: Restore image cache
        uses: actions/cache/restore@v4
        with:
          path: /tmp/ci-images
          key: 'ci-test-${{ github.sha }}'
          fail-on-cache-miss: true
      - name: Import cached images
        run: |
          set -x
          ls -la /tmp/ci-images
          find /tmp/ci-images -type f -name '*.tar' -exec podman load -i '{}' \;
          podman images
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: set up user config
        run: |
          sudo chown -R $(id -u):$(id -g) "${HOME}"
          sudo apt install -y whois
          usertokenhash="$(mkpasswd -m sha512crypt 'e2e-test-token')"
          echo 'GITHUB_TOKEN=e2e-test-token' > env
          echo "export L7_USER_TOKEN_HASH=${usertokenhash}" > .env
          echo 'export L7_GITHUB_TOKEN=${{ github.token }}' > .env
      - name: Run test ${{ matrix.test }}
        run: |
          podman network ls
          # NOTE: For no apparent reason, building nvim image in separate stage and then importing results in all files under /home/user to be owned by root:root when running container off image
          make -j4 image_nvim
          make test_e2e_${{ matrix.test }}
    env:
      BUILDAH_FORMAT: docker
      DEBUG: ''
      BUILD_COMPOSE: ''

# TODO: should work
#  test-e2e-docker:
#    runs-on: ubuntu-${{ matrix.ubuntu-version }}
#    needs: test-make-all
#    services:
#      registry:
#        image: registry:2
#        ports:
#          - 80:5000
#    permissions:
#      contents: read
#    strategy:
#      fail-fast: false
#      matrix:
#        test:
#          - curl
#          - ghauth
#        ubuntu-version:
#          - 22.04
#          - 24.04
#    steps:
#      - name: Allow cleartext http to localhost container registry (docker)
#        run: |
#          echo '{"insecure-registries" : [ "localhost" ]}' | sudo tee /etc/docker/daemon.json
#
#      - name: Restore image cache
#        uses: actions/cache/restore@v4
#        with:
#          path: /tmp/ci-images
#          key: 'ci-test-${{ github.sha }}'
#
#      - name: Import cached images
#        run: |
#          set -x
#          ls -la /tmp/ci-images
#          find /tmp/ci-images -type f -name '*.tar' -exec sudo docker load -i '{}' \;
#          sudo docker images
#
#      - uses: actions/checkout@v4
#        with:
#          submodules: true
#
#      - name: set up user config
#        run: |
#          sudo chown -R $(id -u):$(id -g) "${HOME}"
#          sudo apt install -y whois
#          usertokenhash="$(mkpasswd -m sha512crypt 'e2e-test-token')"
#          echo 'GITHUB_TOKEN=e2e-test-token' > env
#          echo "export L7_USER_TOKEN_HASH=${usertokenhash}" > .env
#          echo 'export L7_GITHUB_TOKEN=${{ github.token }}' > .env
#
#      - name: Prep docker
#        run: |
#          sudo apt-get update
#          sudo apt-get dist-upgrade -y
#          sudo apt-get install -y --no-install-recommends docker-compose
#          sudo systemctl restart docker.service
#          sudo -E docker --version
#      - name: Run test ${{ matrix.test }}
#        run: |
#          sudo -E docker network ls
#          make test_e2e_${{ matrix.test }}
#    env:
#      CMD: sudo -E docker
#      CONTAINER_CMD: sudo -E docker
#      DEBUG: '1'
